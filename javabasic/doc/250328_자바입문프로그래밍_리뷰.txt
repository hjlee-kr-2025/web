비트 (bit) : 0과 1을 표현하는 것
: 2진수의 최소단위
  0 과 1을 가지고 숫자하나를 표현하는 것
바이트 (byte) : 1byte = 8bit
: 8자리 2진수
일반: 00000000 ~ 11111111 : 0~255
음수를 사용하려면 숫자앞에 -를 붙이면 됩니다.

컴퓨터에서는 -값을 사용하려면 +와 -구분을 위해서 비트1개를 사용해야 합니다.

00000000
00000001  -> 보수 11111111

00000010  -> 11111101 + 1
             = 11111110  = -2
00000011
00000100
....
01111111 : +중에 제일큰수
여기서 1을 더하면
10000001 : 음수중에 제일작은

변수 : 변하는 수(값)
JAVA에서는 변수를 선언할 때 자료형이 필요합니다.
기본자료형 (8가지)
- 기본자료형을 제외하는 나머지는 클래스자료형(참조자료형) 입니다.
*정수형 : byte(1), short(2), int(4), long(8)
*실수형 : float(4), double(8)
*문자형 : char(2) - unicode
*논리형 : boolean(1)
long type 정수형 : 숫자뒤에 l, L을 붙여 사용합니다.
예)
int num1 = 12;
long num2 = 12L;
float type 실수형 : 숫자뒤에 f, F를 붙여서 사용합니다.
문자형 : '문자' - 작은따옴표안에 문자하나를 넣어서 사용합니다.
논리형 : true , false


** 변수이름
- 영어대문자, 소문자, 숫자, $, _
- 숫자는 처음에 오지 못합니다.
- camel case 방식의 변수이름을 많이 사용합니다.
- "_" 방식의 변수이름

** 상수 - 고정된 값
final 예약어를 사용하여 변수를 선언하면 상수가 됩니다.
- 상수의 이름은 자바에서는 대문자로 많이 사용합니다.

** 형변환 : 자료형을 변경하는 것
- 묵시적 형변환
: 작은곳에서 큰곳은 자료형없이 자동으로 진행됩니다.
- 명시적 형변환 (강제캐스팅)
: 큰자료형을 작은자료형에 넣을때는 변환되는 자료형을 표시해야 합니다.
예) short num1 = 258;
2진수:	00000001 00000010
byte num2 = (byte)num1;
num2 : 00000010 (하위바이트)만 남습니다. 그래서 num2 는 2가 됩니다.

기본자료형에 대응하는 클래스자료형
===> Wapper class
* byte		: Byte
* short		: Short
* int		: Integer
* long		: Long
* float		: Float
* double	: Double
* char		: Character
* boolean	: Boolean
* 		: String(문자열)

((( 연산자 )))
** 산술연산자 : + , - , * , / , %
++ : 증가연산자
-- : 감소연산자
==> 변수에서만 사용할 수 있습니다.
==> 단항연산자 입니다.
사용예)
int num1 = 0;
++num1; ==> 잘모르면 추천
num1++;
System.out.println("num1 = " + num1);
===> num1 = 2

** 관계연산자
> , >= , < , <= , == , !=

** 논리연산자
&&(AND), ||(OR) : 2개의 값을 가지고 사용
!(NOT) : 1개의 값을 가지고 사용

** 3항 연산자
(조건식)?참:거짓;


4장: 제어흐름 이해하기
** 조건문
if문, if~else문, if~else if~else 문
if(조건) {
	참일때 실행합니다.
}
-----------------
if(조건) {
	참일때 실행합니다.
}
else {
	거짓일때 실행합니다.
}
------------
if(조건1) {
	조건1이 참일때
}
else if(조건2) {
	조건1이 거짓, 조건2 참
}
else {
	조건1 거짓, 조건2 거짓
}

<<switch 문, case, break>>
switch (변수) {
case 값1:
	변수데이터가 값1일때 이곳으로
	break; // switch 블럭을 빠져나갑니다.
case 값2:
	변수데이터가 값2일때
	break;
default:
	// 이부분은 구현이 안되어도 괜찮습니다. case에 값이 없을때 이곳으로 넘어옵니다.
}

반복문 - 동일코드를 반복적으로 사용할 때 사용하는 명령문입니다.
** while문, do~while문, for문
while(조건) {
	반복적으로 실행할 코드;
}
--> 조건이 참인 동안 반복해서 블럭안의 내용이 처리됩니다.
while(true){
	무한반복코드
}
--> while문의 조건을 true로 하면 무한반복되는 프로그램을 작성할 수 있습니다.
do {
	최초1번 무조건 진행
	2번째부터 참일때 처리
} while(조건);

for(1 ; 2 ; 4) {
	3
}
for문의 진행순서
1->2(참)->3->4->2(참)->3->4->...
->2(거짓) : 블럭나옴

둘째마당: 자바의 핵심,
객체 지향 프로그래밍
(OOP: Object Oriented Programming)
객체 지향 프로그래밍을 위해 만들어진 것이 java의 클래스 입니다.

클래스의 구성
- 멤버변수 : 클래스 내부에 선언되어있는 변수
- 메서드(함수) : 클래스 내부의 함수
public class Student {
	private int studentNo;
	private String studentName;

	public int getStudentNo(){
		return studentNo;
	}
}

*** static 변수
사용법(선언방법)
public static 자료형 변수이름 = 초기값;
예) public static int serialNum = 1000;
- static 변수의 다른이름은 클래스변수라고도 합니다.
- 클래스의 생성없이 사용할 수 있는 변수입니다.
public class Student {
	public static int serialNum = 1000;
}
이 변수를 다른 클래스에서 사용하려고 하면
Student.serialNum 으로 사용하면 됩니다.
클래스가 생성자를 사용해서 구현된다고 하더라도
static 변수는 추가로 할당되지 않고 같은 클래스 인스턴스에서 공유되어 사용됩니다.

((((( 7장 )))))
배열과 ArrayList
: 같은 자료형의 데이터를 순서대로 저장하고 사용하는 것
: 인덱스: 0번부터 시작합니다.

배열은 처음 만들때 크기가 정해집니다.
-- 크기변경 불가능
ArrayList는 데이터를 자유롭게 추가하고 삭제하는 것이 가능하고, 저장된 데이터의 개수를 손쉽게 알수 있습니다



8-10장 상속, 추상클래스, 인터페이스
--> 상속이 없다면 추상클래스, 인터페이스는 사용할 수 없습니다.
--> 추상클래스, 인터페이스는 생성자를 사용할 수 없습니다.(메모리할당불가)
--> 왜 할당이 안되도록 자바에서 막아놨냐?
   (구현안 된 메서드가 있기 때문입니다.)
   abstract 메서드가 존재하기 때문입니다.
--> 추상클래스, 인터페이스는 상속을 받을 클래스에서 abstract 메서드의 구현부를
		만들고(프로그램밍하고) 자녀클래스의 생성자를 통해서 메모리할당이 됩니다.
--> 함수의 재정의 (@Override) - 오버라이팅
  : 부모클래스의 함수 (리턴자료형, 함수이름, 매개변수동일 하게 사용)
    -> {} 처리부만 새롭게 작성하는 것을 오버라이팅이라고 합니다.
--> 함수위에 @Override 라고 어노테이션을 붙이면
		부모클래스에 동일한 함수가 없으면 error를 발생시킵니다.
		
부모클래스(일반클래스, 추상클래스, 인터페이스)로
선언하고 자녀클래스 생성자로 메모리 할당을 할 수 있습니다.
---> 다형성     
이때 부모클래스와 자녀클래스가 동일한 함수(메서드)가 있고,
처리부는 다르다고 할때
이 변수를 사용해서 메서드를 호출하면, 생성된 자녀클래스의 함수(메서드)처리부가
실행됩니다.


**** 다형성
같은 부모클래스를 상속받은 자녀클래스들을
부모클래스로 선언하고
생성은 각각의 자녀클래스를 사용하는 것을 다형성이라고 합니다.
1. ArrayList 등의 자료형에 같이 보관할 수 있습니다.
	- ArrayList 한가지 자료형을 순서있게 보관합니다.
2. 하나의 메서드를 같이 사용할 수 있습니다.
	- 매개변수나 리턴타입을 부모클래스자료형으로 하면
	자녀클래스가 어떤것이든 사용할 수 있습니다.
	
instanceof A: A 클래스로 생성되었는지를 확인해주는 예약어

예)
1. Execute.execute(new BoardListService(), null);
2. Execute.execute(new BoardViewService(), new Long[]{no, 1L});
===
Object execute(Service service, Object obj) {


		if (service instanceof BoardListService) {
			1번으로 이곳에 올때는 참이어서 이곳으로 옵니다.
		}
		else {
			2번으로 이곳에 올때는 거짓이므로 이곳으로 옵니다.
		}


////
// BoardListService 클래스를 만들고 Service 인터페이스를 상속받은것
public class BoardListService implements Service {

}
// BoardViewService 클래스를 만들고 Service 인터페이스를 상속받은것
public class BoardViewService implements Service {

}


BoardListService listService = new BoardListService();
위와 같이 선언하고 자신의 생성자를 이용해서 사용할 수도 있지만,

Service service = new BoardListService();
부모클래스로 선언하고 자녀클래스로 생성해서 사용할 수도 있습니다.   

*** 모든클래스는 Object 로 선언할 수 있다 (참 / 거짓)


*** 추상클래스 - abstract
----- abstract 메서드 (추상메서드)

*** 함수의 선언? / 구현?

** 함수의 선언
public abstract Integer delete(Long no);
==> JAVA는 함수의 선언을 abstract 예약어로 구분하였습니다.

** 함수의 구현
public Integer delete(Long no) {

}

***  JAVA에서 추상클래스는 abstract 예약어를 사용한 클래스
-- 추상클래스에는 추상메서드를 사용할 수 있다

***  인터페이스는? class 대신 inteface 예약어로 만든 클래스
-- 구현된 메서드(함수)가 포함될 수 없습니다.
-- 오직 선언만있는 추상(abstract) 메서드만 가질 수 있습니다.
-- 모든 메서드 선언시 abstract 예약어를 생략할 수 있습니다.

** 생성자를 사용하려면 모든 메서드(함수)가 구현되어있어야 합니다.

** abstract 메서드는 왜 필요했을까요?
--> 다형성, 상속
부모클래스로 선언하고 자녀클래스로 생성한 클래스객체가 있습니다.

일반적으로 자녀클래스에만 있는 메서드를 사용하려면 자녀클래스로
다운캐스팅후에 메서드를 사용할 수 있습니다.

그런데, 자녀클래스메서드가 부모클래스에 메서드가 선언되어있다면?
다운캐스팅하지 않아도 자녀클래스메서드를 사용할 수 있습니다. 

상속의 예약어 - extends, implements
* extends 예약어 : 클래스가 클래스를 상속받을 때, 인터페이스가 인터페이스를 상속받을 때
* implements 예약어 : 클래스가 인터페이스를 상속받을 때
* 클래스는 하나만 상속 줄 수가 있습니다.
* 인터페이스는 여러개 상속 줄 수 있습니다.
* 클래스와 인터페이스를 동시에 상속도 가능합니다.

예) public class 자녀클래스 extends 부모클래스 implements 인터페이스 {
} 

[11장] JDK 기본클래스
-- 패키지 : java.lang 안에 있는 클래스는 import 없이 사용할 수 있습니다.
-- 모든클래스의 최상위 클래스 : Object 클래스
public Student {
}
==> 자바컴파일러가 extends가 없으면
public Student extends Object {
}

Java는 프로그램을 작성하고 컴파일과정을 거쳐서 JM위에서 실행이 됩니다.

**** Ojbect 클래스의 주요 메서드
String toString()
---> 객체를 문자열로 표현해서 리턴 : 클래스이름과 참조주소를 문자열로 리턴
---> 자녀클래스에서 재정의해서 사용하는 대표적인 메서드
		: 멤버변수들의 데이터를 알려주는 방식의 재정의를 많이 사용합니다.
boolean equals(Object obj)
---> 두 인스턴스가 동일한지 (참조주소가 동일한지) 확인하는 용도록 구성
---> 자녀클래스에서는 데이터가 동일한지 확인하는 용도로 재정의해서 사용합니다.
Class getClass()
---> 객체의 Class 클래스를 반환 -> 생성한 클래스가 무엇인지 확인 		



--- 문자열을 다루는 String 클래스
* final char[] 
* 데이터가 변경되면 주소값이 바뀝니다.
* 변경되지 않는 문자열을 다룰때 주로 사용합니다.
--- 문자열의 데이터가 자주변경된다면 ? StringBuffer, StringBuilder

1. 문자열에 다른타입의 변수값을 +(더하면) ==> 문자열이 됩니다.
2. "".formatted();
예)
	String name = "김";
	int no = 1;
	double point = 4.5;
	
	String info = "%s은 %d학년이고, 학점은 %.1f 입니다.".formatted(name,no,point);
	String info = name + "은 " + no + "학년이고, 학점은 " + point + " 입니다.";
	
	

Enum 클래스는
: 상수를 다양한 자료형으로 관리할 때 사용하는 클래스입니다. 


Class 클래스
: 클래스, 인터페이스의 정보를 관리하는 클래스
클래스 정보를 가져오기
1) getClass() 메서드를 통해서 가져오기
String str = new String();
Class cInfo = str.getClass();
// get.Class() 메서드는 Object 클래스에 구현되어있는 메서드로
// 모든 클래스에서 사용할 수 있는 메서드 입니다.
// ==> 클래스의 정보를 가져오는데 사용합니다.

2) 파일정보로 가져오기 
Class cInfo = String.class;

3) Class.forName() 이용하기
Class cInfo = Class.forName(java.lang.String);
//=> 패키지+클래스이름으로 forName() 의 매개변수로 전달
// Class.forName() 의 다른역할은 class를 
시스템에 로딩하는 역할도 합니다.
이때 class안에 static 메서드가 있다면 실행이 됩니다.

Class 클래스에서 많이 쓰이는 메서드
forName() --> static으로 되어있는 메서드이고 드라이버(클래스) 로딩시 사용
getName() --> 클래스의 패키지와 이름을 String으로 리턴

이전책에는 있는데 개정판에서 없어진 내용
* Wrapper 클래스 - 기본자료형에 대응되는 클래스
byte				Byte
short				Short
int					Integer
long				Long
float				Float
double			Double	
char				Character
boolean			Boolean

[12장] 컬렉션 프레임워크
- 자바에서 데이터를 저장하고 처리할 수 있도록 제공하는 클래스, 인터페이스의 집합

* 제네릭? 여러자료형을 사용할 수 있도록 임의문자를 사용
예) List<E> 에서 <> 안에 임의의 문자 E를 사용한 것

* 컬렉션 프레임워크의 클래스, 인터페이스는 제네릭을 사용해서 구현되어있습니다.


2개의 인터페이스 그룹
1. Collection 인터페이스 (1개의 자료형)
- List : 순서가 있도록 자료를 보관
- Set : 무작위로 보관, 중복되는 값 허용안함
ArrayList
add(값) : 데이터 추가
get(인덱스) : 데이터 확인하기
remove(인덱스) : 데이터 꺼내오기 -> list에서는 삭제됩니다.
size() : 저장된 데이터 개수 리턴


2. Map 인터페이스 (<key,value> 쌍으로 된 자료형을 보관)
HashMap
put(key값, value값) : 데이터 추가
get(key값) : value 값을 가져옵니다.
remove(key값) : key값과 key값에 해당하는 value값을 꺼내오고 데이터삭제
key값은 중복될 수 없습니다. 


Map<String, Service> serviceMap = new HashMap<>();
Map<String, DAO> daoMap = new HashMap<>();

// daoMap에 데이터를 추가합니다.
// String 된 key값, DAO 클래스 변수
daoMap.put("boardDAO", new BoardDAO());
==>
String str = "boardDAO";
BoardDAO boardDAO = new BoardDAO();
daoMap.put(str, boardDAO);

// serviceMap 에 데이터를 추가합니다.
serviceMap.put("/board/list.do", new BoardListService());
==>
String str = "/board/list.do";
Service boardListService = new BoardListService();
serviceMap.put(str, boardListService);

// 서비스에 dao 주소를 할당 : 조립
// serviceMap에 키값으로 Service 주소를 가져옵니다.
Service service = serviceMap.get("/board/list.do");
// daoMap에 키값으로 DAO 주소를 가져옵니다.
DAO dao = daoMap.get("boardDAO");
// service 의 멤버변수인 dao에 DAO주소를 할당합니다.
service.setDAO(dao);

==> 한줄로 바꾸면
serviceMap.get("/board/list.do").setDAO(daoMap.get("boardDAO"));


[13장] 내부클래스, 람다식, 스트림
내부클래스는 잘 사용하지 않습니다.
- "클래스 내부에 클래스를 구현할 수 있다" 정도로 넘어가셔도 괜찮습니다.

람다식 : 익명함수를 만든다.
int add(int num1, int num2) {
	return num1 + num2;
}
add(num1, num2); 
==>
(num1, num2) -> {return num1 + num2;}

Java에서는 람다식을 단독으로 사용하는 경우는 많이 없습니다.
함수형 인터페이스를 만들고 람다식으로 구성해서 사용합니다.


**** 데이터베이스에서 자료를 가져오는 프로그램을 작성할 때
자료를 가져와서 정렬하는 방식이 아닌,
데이터베이스에서 자료를 가져올때 정렬된 자료를 가져와서 사용합니다.

스트림 : 특정조건, 또는 정렬에 관련된 내용을 쉽게 처리하도록 돕는역할
** 중간연산 : filter(), map(), sorted()
** 최종연산(마지막에 들어갑니다.)
	: forEach(), count(), sum(), reduce()
스트림을 사용할때 ()안에 람다식으로 표현해 주는 경우가 많습니다.


[ch14] 예외 처리
*** Exception 클래스 (예외 클래스의 최상위 클래스)
 ==> 모든 예외처리 클래스는 Exception 클래스를 상속받아서 구성되어있습니다.

try {
} catch (Exception e) {
	e.printStackTrace();
} finally {
}

public 리턴자료형 메서드이름() throws Exception {
}

Exception
--- IOException
===> 코드상에서 try~catch 또는 throws 처리가 안되어있으면 오류로
나타납니다.
--- RuntimeException
===> 코드상에 try~catch 또는 throws 가 없어도 컴파일되고 실행도 됩니다.
---> 하지만 try~catch 또는 throws 가 없으면 예외발생시 시스템이 중단됩니다.

예외처리의 목적은 시스템이 중단없이 사용하고자 하는데 있습니다.
자바가 웹프로그램에서 많이 사용하는 이유가 예외처리가 잘 구성되어있기 때문입니다.


키보드 입력을 위한 클래스 Scanner
Scanner scanner = new Scanner(System.in);
String inputStr = scanner.nextLine();









